@model CafeMVC.Application.ViewModels.Orders.OrderForCreationVm
@using Microsoft.AspNetCore.Http;
@using CafeMVC.Application.Helpers;

<head>
    <link rel="stylesheet" href="~/css/OrderStyleSheet.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

    <style>
        input:invalid + .validity:after {
            position: absolute;
            content: '✖';
            padding-left: 5px;
        }

        input:valid + .validity:after {
            position: absolute;
            content: '✓';
            padding-left: 5px;
        }
    </style>
</head>
@{
    int indexOfDeliverAddress = 0;
    string addressnubmer = "";
    if (@Model.IsCollection == false)
    {
        indexOfDeliverAddress = @Model.Addresses.FindIndex(x => x.AddressTypeId == 2);
        if (Model.Addresses[0] != null)
        {
            if (@Model.Addresses[indexOfDeliverAddress].FlatNumber != 0)
            {
                addressnubmer = $"{@Model.Addresses[indexOfDeliverAddress].BuildingNumber} / {@Model.Addresses[indexOfDeliverAddress].FlatNumber}";
            }
            else
            {
                addressnubmer = @Model.Addresses[indexOfDeliverAddress].BuildingNumber.ToString();
            }
        }
    }
}
@using (Html.BeginForm("PlaceOrder", "Order", FormMethod.Post))
{
    @Html.HiddenFor(m => m.Payment.PaymentTypeId, new{@value= Model.Payment.PaymentTypeId, @id="paymentTypeId"})
    @Html.HiddenFor(m => m.IsCollection, new{@value= Model.IsCollection})
    <div id="container">
        <div id="top">
            <div id="leadTime">
                <h4>Order to be ready:</h4>
                <input type="hidden" id="delivery" name="LeadTime" value="">
                <label for="delivery">
                    <input id="dateBox" type="date" onchange="onChangeMinTime()"> <span class="validity"></span>&nbsp;&nbsp;&nbsp;&nbsp; <input id="timeBox" type="time" min="10:00" max="20:00"> <span class="validity"></span>
                </label><br>
                <h5></h5>
            </div>
            <div id="note">
                <h4>Note</h4>
                <textarea id="notebox" class="otherInput" name="Note" type="text"></textarea>
            </div>
        </div>
        <div id="down">
            <div id="card">
                @if (Model.Payment.PaymentTypeId == 1)
                {
                    <h4>Payment Card</h4>
                    <div id="cardType">
                        @Html.DropDownListFor(m => m.Payment.PaymentCard.CardTypeId, new List<SelectListItem>{
                new SelectListItem { Text = "Debit", Value="1"},
                new SelectListItem { Text = "Credit", Value="2"}
                }, new{@class="otherInput", @id="cardType"})
                    </div>
                    <br>
                    <div id="cardHolder">
                        <h5>Card Holder Name</h5>
                        @Html.TextBoxFor(m => m.Payment.PaymentCard.CardHolderName, new{@required = "required", @oninput="CheckField('cardHolder')"})
                        <span></span>
                    </div>
                    <div id="cardNumber">
                        <h5>Card Number</h5>
                        @Html.TextBoxFor(m => m.Payment.PaymentCard.CardNumber, new{@id="cardNumberTxtBox", @oninput="addSpaces(event)" ,@onchange="TestCreditCard()", @pattern="[0-9]{4} [0-9]{4} [0-9]{4} [0-9]{4}", @placeholder="0000 0000 0000 0000", @maxlength="19", @required = "required" })
                        <span id="CardAlert"></span>
                    </div>
                    <div id="expiryDate">
                        <h5>Expiry Date</h5>
                        <div id="month">
                            <label for="month">MM</label>
                            <select name="month" id="expiryMonth" class="otherInput" onchange="CheckIfCardIsValid()" placeholder="MM"></select>
                        </div>
                        <div id="year">
                            <label for="Year">YY</label>
                            <select name="Year" id="expiryYear" class="otherInput" onchange="CheckIfCardIsValid()" placeholder="YY"></select>
                           </div>
                        @Html.HiddenFor(m => m.Payment.PaymentCard.ExpirationDate, new{@id="ExpiryDateBox"})
                        <span style="display:block;"></span>
                    </div>
                    <div id="cvc">
                        <h5>CVC</h5>
                        @Html.TextBoxFor(m => m.Payment.PaymentCard.SecureityCode, new{ @required = "required", @oninput="CheckField('cvc')"})
                        <span></span>
                    </div>
                }
                else
                {
                    <h4>Payment Method:   @Model.Payment.PaymentType.Name</h4>
                }
            </div>
            <div id="products" class="information">
                <h3>Ordered Products:</h3>
                @if (Model.Products != null)
                {
                    @foreach (var product in Model.Products)
                    {
                        string productText = $"{product.Quantity}x {product.ProductVm.Name}  -- {product.OverallPrice}";
                        <h4>@productText</h4>
                    }
                }
                <h4>Delivery Charge: @Model.DeliveryCharge.ToString()</h4>
            </div>
            <div id="total">
                <h4>Your Cart ( @Context.Session.GetInt32("qty") products ):</h4>
                <h4>Total:  &#163; @Context.Session.GetString("total")</h4>
                <h4>Delivery to:</h4>
                @if (@Model.IsCollection == false)
                {
                    <h5>@addressnubmer @Model.Addresses[indexOfDeliverAddress].Street</h5>
                    <h5>@Model.Addresses[indexOfDeliverAddress].City @Model.Addresses[indexOfDeliverAddress].ZipCode</h5>
                    <h5>@Model.Addresses[indexOfDeliverAddress].Country</h5>
                }
                else
                {
                    <h5>x Collection</h5>
                }
                <button type="submit" class="btn btn-success" value="Submit" name="Btn" role="button" onclick="AssignValues()" id="submitButton" disabled>Proceed and Pay</button>
            </div>
        </div>
    </div>
}
@section Scripts{
    <script src="~/js/JS Card Validation.js"></script>
    <script type="text/javascript">

        const paymentType = document.getElementById("paymentTypeId").value;
        if(paymentType !== 1){
            let submit = document.getElementById("submitButton").disabled = false

        }

        CombineDateAndTime = function (day, time) {
            var newDate = day + " " + time + ":00";

            return newDate;
        };

        function getDateWithHour(dateString, hour) {
            var date = new Date(dateString);
            date.setHours(hour, 0, 0);
            return date.toString();
        }
        var minimumTime = "10:00"
        var today = new Date();
        var openingTime = new Date(getDateWithHour(today, 10));

        var closingTime = new Date(getDateWithHour(today, 21));
        var time = document.getElementById("timeBox");
        var date = document.getElementById("dateBox");
        var nextDate = new Date();
        nextDate.setDate(nextDate.getDate() + 1);
       

        if (today < openingTime) {
            time.setAttribute("min", minimumTime);
            time.value = minimumTime;
            date.value = today.toISOString().slice(0, 10);
            date.setAttribute("min", today.toISOString().slice(0, 10));
        }
        else if (today > closingTime) {
            time.setAttribute("min", minimumTime);
            time.value = minimumTime;
            date.setAttribute("min", nextDate.toISOString().slice(0, 10));
            date.value = nextDate.toISOString().slice(0, 10);
        }
        else if (today > openingTime && today < closingTime) {
            time.value = new Date().toLocaleTimeString([], { hour: '2-digit', minute: "2-digit" }).toString();
            time.setAttribute("min", new Date().toLocaleTimeString([], { hour: '2-digit', minute: "2-digit" }).toString());
            date.value = today.toISOString().slice(0, 10);
            date.setAttribute("min", today.toISOString().slice(0, 10));
        }
        function onChangeMinTime() {
            var amendedDate = document.getElementById("dateBox").value;
            console.log(amendedDate);
            var fullChangedDate = new Date(amendedDate + "T00:00:00Z");
            console.log(fullChangedDate);
            if (fullChangedDate < today) {
                if (today < openingTime) {
                    time.setAttribute("min", minimumTime);
                    time.value = minimumTime;
                    date.value = today.toISOString().slice(0, 10);
                    date.setAttribute("min", today.toISOString().slice(0, 10));
                }
                else if (today > closingTime) {
                    time.setAttribute("min", minimumTime);
                    time.value = minimumTime;
                    date.setAttribute("min", nextDate.toISOString().slice(0, 10));
                    date.value = nextDate.toISOString().slice(0, 10);
                }
                else if (today > openingTime && today < closingTime) {
                    time.value = new Date().toLocaleTimeString([], { hour: '2-digit', minute: "2-digit" }).toString();
                    time.setAttribute("min", new Date().toLocaleTimeString([], { hour: '2-digit', minute: "2-digit" }).toString());
                    date.value = today.toISOString().slice(0, 10);
                    date.setAttribute("min", today.toISOString().slice(0, 10));
                }

            }
            else if (fullChangedDate > today) {
                time.setAttribute("min", minimumTime);
                time.value = minimumTime;
            }

        }
        // assigning value to radio button
        function AssignValueToLeadTime() {
            var leadTimeHidden = document.getElementById("delivery");
            var time = document.getElementById("timeBox");
            var date = document.getElementById("dateBox");

            leadTimeHidden.value = CombineDateAndTime(date.value, time.value);

        }
        document.getElementById('cardType').onchange = function (e) {
            var value = parseInt(e.value.target);
            alert(value);
        };

        function AssignValues(){
            AssignValueToLeadTime();
            AssignValueToCrediCardExpiryDate();
        }



    </script>
}