@model CafeMVC.Application.ViewModels.Orders.OrderForCreationVm
@using Microsoft.AspNetCore.Http;
@using CafeMVC.Application.Helpers;
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    string title = "Your Cart";
    string ingredientToDisplay, dietInfoToDisplay;
    var listOfPaymentTypesForDropdown = new List<SelectListItem>();
    for (int i = 0; i < Model.Payment.AllPaymentTypes.Count; i++)
    {
        listOfPaymentTypesForDropdown.Add(
            new SelectListItem { Value = Model.Payment.AllPaymentTypes[i].Id.ToString(), Text = Model.Payment.AllPaymentTypes[i].Name }
        );
    }

    // int count = Model.Products.Count;
}
<head>
    <link rel="stylesheet" href="~/css/OrderStyleSheet.css" />

</head>
<h1>@title</h1>
<div class="wrapper">
    @if (Model.Products  != null)
    {
        <div class="productBar">
            @for (int i = 0; i < Model.Products.Count; i++)
            {
                <div class="product">

                    <div class="picture">
                        <div class="pictureFrame">
                            <div class="displayPicture" style=" background-image: url('@Model.Products[i].ProductVm.BasePath');"></div>
                        </div>
                    </div>
                    <div class="description">
                        <div>
                            <h3>@Model.Products[i].ProductVm.Name</h3>
                            <hr>
                        </div>

                        <div class="descriptionText">@Model.Products[i].ProductVm.Description</div>
                        <hr>
                        <div>
                            Igredients: &emsp;
                            @for (int j = 0; j < Model.Products[i].ProductVm.Ingredients.Count; j++)
                            {
                                if (j != (Model.Products[i].ProductVm.Ingredients.Count - 1))
                                {
                                    ingredientToDisplay = Model.Products[i].ProductVm.Ingredients[j].Name + ", ";
                                    @ingredientToDisplay
                                }
                                else
                                {
                                    @Model.Products[i].ProductVm.Ingredients[j].Name
                                }
                            }
                            <hr>
                        </div>
                        @if (Model.Products[i].ProductVm.Allergens != null)
                        {
                            <div>
                                Allergens: &emsp;
                                @for (int j = 0; j < Model.Products[i].ProductVm.Allergens.Count; j++)
                                {
                                    if (j != (Model.Products[i].ProductVm.Allergens.Count - 1))
                                    {
                                        dietInfoToDisplay = Model.Products[i].ProductVm.Allergens[j].Name + ", ";
                                        @dietInfoToDisplay
                                    }
                                    else
                                    {
                                        @Model.Products[i].ProductVm.Allergens[j].Name
                                    }
                                }
                                <hr>
                            </div>
                        }
                        @if (Model.Products[i].ProductVm.DietInformations != null)
                        {
                            <div>
                                Product is: &emsp;
                                @for (int j = 0; j < Model.Products[i].ProductVm.DietInformations.Count; j++)
                                {
                                    if (j != (Model.Products[i].ProductVm.DietInformations.Count - 1))
                                    {
                                        dietInfoToDisplay = Model.Products[i].ProductVm.DietInformations[j].Name + ", ";
                                        @dietInfoToDisplay
                                    }
                                    else
                                    {
                                        @Model.Products[i].ProductVm.DietInformations[j].Name
                                    }
                                }
                            </div>
                        }
                    </div>
                    <div class="functions">
                        @using (Html.BeginForm("UpdateCartProduct", "Order", FormMethod.Post))
                        {
                            <input type="hidden" name="productId" value="@Model.Products[i].ProductVm.Id">

                            <div><h3 id="price">&#163;@Model.Products[i].ProductVm.Price</h3></div>
                            <div><button type="button" class="button button5 btn-plus" data-id="textbox{@Model.Products[i].ProductVm.Id}" id="@Model.Products[i].ProductVm.Id" onclick="functionUp('textbox{@Model.Products[i].ProductVm.Id}')">+</button></div>

                            <div><input type="text" min="1" name="quantity" id="textbox{@Model.Products[i].ProductVm.Id}" class="counter textBox" value="@Model.Products[i].Quantity" /></div>
                            <div><button type="button" class="button button5 btn-minus" onclick="functionDown('textbox{@Model.Products[i].ProductVm.Id}')">-</button></div>

                            <br>
                            <div> <button type="submit" id="UpdateCart" class="textBox">Update</button></div>
                        }
                        @using (Html.BeginForm("RemoveProductFromCart", "Order"))
                        {

                            <div>
                                <a asp-action="RemoveProductFromCart" asp-controller="Order" asp-route-id="@Model.Products[i].ProductVm.Id" id="deleteButton">

                                    <i class="fa-solid fa-trash-can"> </i>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="checkoutBar">
            <h4>Your Cart ( @Context.Session.GetInt32("qty") products ):</h4>
            <h4>Total:  &#163; @Context.Session.GetString("total")</h4>
            <br />
            @using (Html.BeginForm("CustomerInfo", "Order", FormMethod.Get))
            {
                <input type="radio" id="collection" name="IsCollection" value="true" onclick="ShowHideDiv()" />
                <label for="collection">Collection</label>
                <br>
                <input type="radio" id="delivery" name="IsCollection" value="false" onclick="ShowHideDiv()" />
                <label for="delivery">Delivery</label>
                <br>
                <div id="dvtext" style="display: none">
                    Check your postcode if we can deliver.
                    <input type="text" id="txtBox" class="textBox" name="Postcode" />
                    <span id="displayError"></span>
                    <br />
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div id="cartDropdownAddresses">
                        </div>
                        <div id="customerIdInput"></div>
                    }
                </div>
                <br />
                <h4>Payment Method</h4>
                @Html.DropDownList("PaymentTypeId", listOfPaymentTypesForDropdown, new { @class = "otherInput", @id = "paymentTypeDropdown" })
                <input type="hidden" id="paymentTypeName" name="PaymentName" />
                <br />
                <br />
                <button type="submit" class="btn btn-success" value="Submit" name="Btn" role="button" id="submit" disabled>Proceed</button>

            }
        </div>
    }
    else
    {
        <h2>Your cart is empty</h2>
    }
</div>

@section Scripts{
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        function functionUp(id) {
            var value = parseInt(document.getElementById(id).value, 10);
            value = isNaN(value) ? 0 : value;
            value++;
            document.getElementById(id).value = value;
        }
        function functionDown(id) {
            var value = parseInt(document.getElementById(id).value, 10);
            value = isNaN(value) ? 0 : value;
            value--;
            if (value >= 0) {

                document.getElementById(id).value = value;
            }
        }

        function CheckPostcode() {
            var enteredPostcode = document.getElementById("txtBox");
            console.log(enteredPostcode.value);
        }

        function assignPaymentName() {
            var paymentName = document.getElementById('paymentTypeName');
            var dropdownList = document.getElementById('paymentTypeDropdown');
            paymentName.value = dropdownList.options[dropdownList.selectedIndex].text;
        }

        function handleAddressSelection() {
            var addressDropdown = document.getElementById('AddressDropdown');
            var submitButton = document.getElementById('submit');
            var postcodeTextbox = document.getElementById('txtBox');
            var textboxMessage = document.getElementById("displayError");

            addressDropdown.addEventListener('change', function () {
                var selectedAddress = addressDropdown.value;

                if (selectedAddress !== '') {
                    submitButton.disabled = false;
                    postcodeTextbox.value = '';
                    textboxMessage.innerHTML = '';

                } else {
                    submitButton.disabled = true;
                }
            });
        }
        function ShowHideDiv() {
            var delivery = document.getElementById("delivery");
            var dvtext = document.getElementById("dvtext");
            var submit = document.getElementById("submit");
            dvtext.style.display = delivery.checked ? "block" : "none";
            submit.disabled = delivery.checked ? true : false;

        }
        var textbox = document.getElementById("txtBox");
        textbox.addEventListener("change", CheckPostcode);

        function CheckRegex(enteredPostcode) {
            var regEx = /^[a-z]{1,2}\d[a-z\d]?\s*\d[a-z]{2}$/i;
            var isValid = regEx.test(enteredPostcode);

            return isValid;

        }
        function CheckIfCanBeDelivered(enteredPostcode) {
            var upperPostcode = enteredPostcode.toUpperCase();
            var isLongerThanSixSigns = upperPostcode.length > 6;
            var firstOutcode = isLongerThanSixSigns ? "LE1 " : "LE1";
            const listOfOutcodesForDelivery = [firstOutcode, "LE2", "LE3", "LE4"];
            var outCode = upperPostcode.substring(0, 4);
            var canWeDeliver = listOfOutcodesForDelivery.some((x) =>
                outCode.includes(x));
            return canWeDeliver;
        }

        function CheckPostcode() {
            var enteredPostcode = document.getElementById("txtBox").value;
            var isValid = CheckRegex(enteredPostcode);
            var textboxMessage = document.getElementById("displayError");
            var addressDropdown = document.getElementById('AddressDropdown');
            if (isValid == true) {
                var canWeDeliver = CheckIfCanBeDelivered(enteredPostcode);
                if (canWeDeliver == true) {
                    textboxMessage.style.color = "green";
                    textboxMessage.innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i> We can deliver to you';
                    document.getElementById("submit").disabled = false;
                } else {
                    textboxMessage.style.color = "red";
                    textboxMessage.innerHTML = '<i class="fa-solid fa-circle-exclamation"></i> Sorry, we cannot deliver to this postcode';
                    submit.disabled = true;
                }
                console.log(canWeDeliver);
            } else {
                textboxMessage.innerHTML = '<i class="fa-solid fa-circle-exclamation"></i> Sorry, the postcode is inccorrect';
                textboxMessage.style.color = "red";
                submit.disabled = true;
            }
            if (addressDropdown != null) {  addressDropdown.value ='';
            }
        }
        $('input[name="IsCollection"]').on('change', function () {
            if (this.value === "false") {
                loadPartialView();
            }
        });
        function loadPartialView() {
            var urlAddresses = '@Url.Action("CartDropdownAddresses", "Customer")';
            var urlCustomerId = '@Url.Action("GetCustomerId", "Customer")';

      
            $.get(urlAddresses, function (dataAddresses) {
                $('#cartDropdownAddresses').html(dataAddresses);
            }).done(function () {
                handleAddressSelection();
            });

            
            $.get(urlCustomerId, function (dataCustomerId) {
                $('#customerIdInput').html(dataCustomerId);
            });
        }


    </script>
}