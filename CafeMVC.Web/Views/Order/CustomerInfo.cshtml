@model CafeMVC.Application.ViewModels.Orders.OrderForCreationVm
<head>
    <link rel="stylesheet" href="~/css/OrderStyleSheet.css" />
</head>
@{
    bool condition = Model.Payment.PaymentTypeId != 1; // paymentTypes: id 1 == card id 2 == cash id 3 == paypal
    int deliveryAddressIndex = condition ? 0 : 1;
    @if (Model.IsCollection == false)
    {
        Model.Addresses[deliveryAddressIndex].City = "Leicester";
        Model.Addresses[deliveryAddressIndex].Country = "United Kingdoms";
    }
}
@using (Html.BeginForm("Checkout", "Order", FormMethod.Get, new { @id = "CustomerInfoForm" }))
{
    <div id="customerContactInfo">

        <div class="header">
            <h2>Personal Details</h2>
            <hr class="overLine">
        </div>

        <div class="innerGrid">
            <div class="columnOne">
                <div id="firstName">
                <h5>@Html.LabelFor(m => m.Customer.FirstName)</h5>
                    <h6>@Html.TextBoxFor(m => m.Customer.FirstName, new {@class = "textBox textbox2", @required = "required", @maxlength =50, @onchange="CheckField('firstName')"})</h6>
                <span></span>
                </div>
                <div id="lastName">
                <h5>@Html.LabelFor(m => m.Customer.Surname)</h5>
                    <h6>@Html.TextBoxFor(m => m.Customer.Surname, new {@class = "textBox textbox2", @required = "required", @maxlength =50, @onchange="CheckField('lastName')"})</h6>
                <span></span>
            </div>
            </div>

            <div class="columnTwo">
                <h5>E-mail</h5>
                @Html.HiddenFor(m => m.ContactDetails[0].Id)
                @Html.HiddenFor(m => m.ContactDetails[0].ContactDetailTypeId, new {@id="emailTypeId"})
                <h6>@Html.TextBoxFor(m => m.ContactDetails[0].ContactDetailInformation, new {@class = "textBox textbox2", @required = "required", @id="emailBox"})</h6>
                <span id="emailAlert"></span>
                <h5>Contact phone</h5>
                @Html.HiddenFor(m => m.ContactDetails[1].Id)
                @Html.HiddenFor(m => m.ContactDetails[1].ContactDetailTypeId, new {@id="mobileTypeId"})
                <h6>@Html.TextBoxFor(m => m.ContactDetails[1].ContactDetailInformation, new {@class = "textBox textbox2", @required = "required", @id="phoneBox"})</h6>
                <span id="phoneAlert"></span>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.Payment.PaymentTypeId, new{@value= Model.Payment.PaymentTypeId})
    @Html.HiddenFor(m => m.Payment.PaymentType.Name, new{@value= Model.Payment.PaymentType.Name})
    @Html.HiddenFor(m => m.IsCollection, new{@value= Model.IsCollection})
    @if (Model.Payment.PaymentTypeId == 1)
    {

        <div id="billingAddress">
            <div class="header">
                <h2>Billing Address</h2>
                <hr class="overLine">
                @Html.HiddenFor(m => m.Addresses[0].AddressTypeId, new{@id= "billingTypeId"})
            </div>

            <div class="innerGrid">
                <div class="columnOne">
                    <div class="textbox" id="streetBil">
                        <h5>@Html.LabelFor(m => m.Addresses[0].Street, new {@value="Street"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[0].Street, new { @class = "textBox textbox2", @id = "streetB", @required = "required", @onchange="CheckField('streetBil')"})
                        </h6>
                        <span></span>
                    </div>
                    <div class="textbox" id="buildingNumberBil">
                        <h5>@Html.LabelFor(m => m.Addresses[0].BuildingNumber, new {@value="Building Number"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[0].BuildingNumber, new { @class = "textBox textbox2",  @id = "buildingNumberB", @required = "required", @onchange="CheckNumber('buildingNumberBil')"})
                        </h6>
                        <span></span>
                    </div>
                    <div class="textbox" id="flatNumberBil">
                        <h5>@Html.LabelFor(m => m.Addresses[0].FlatNumber, new {@value="Flat Number"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[0].FlatNumber, new { @class = "textBox textbox2", @id = "flatNumberB", @onchange="CheckNumber('flatNumberBil')"})
                        </h6>
                        <span></span>
                    </div>
                </div>

                <div class="columnTwo">
                    <div class="textbox" id="postCodeB">

                        <h5>@Html.LabelFor(m => m.Addresses[0].ZipCode, new {@value="Post Code"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[0].ZipCode, new { @class = "textBox textbox2", @id = "zipCodeB", @required = "required", @onchange="CheckField('postCodeB')"})
                        </h6>
                        <span></span>
                    </div>
                    <div class="textbox" id="cityBil">
                        <h5>@Html.LabelFor(m => m.Addresses[0].City, new {@value="City"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[0].City, new { @class = "textBox textbox2", @id = "cityB", @required = "required", @onchange="CheckField('cityBil')"})
                        </h6>
                        <span></span>
                    </div>
                    <div class="textbox" id="countryBil">
                        <h5>@Html.LabelFor(m => m.Addresses[0].Country, new {@value="Country"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[0].Country, new { @class = "textBox textbox2", @id = "countryB", @required = "required", @onchange="CheckField('countryBil')"})
                        </h6>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
        @if (Model.IsCollection == false)
        {

            <div id="deliveryCheckBox">
                <p><b>Delivery Address <label><input type="checkbox" value="" id="check-address" onclick="FillShippingAddress()">Same as billing?</label></b></p>
            </div>
        }
    }
    @if (Model.IsCollection == false)
    {

        <div id="deliveryAddress">

            <div class="header">
                <h2>Delivery Address</h2>
                <hr class="overline">
                @Html.HiddenFor(m => m.Addresses[deliveryAddressIndex].AddressTypeId, new{ @id="deliveryTypeId" })

            </div>
            <div class="innerGrid">
                <div class="columnOne">
                    <input id="AddressTypeId"
                   name="AddressTypeId"
                   type="hidden"
                   value="2" />
                    <div class="textbox" id="streetDel">
                        <h5>@Html.LabelFor(m => m.Addresses[deliveryAddressIndex].Street, new {@value="Street"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[deliveryAddressIndex].Street, new { @class = "textBox textbox2", @id = "streetD", @onchange="CheckField('streetDel')"})
                        </h6>
                        <span></span>
                    </div>
                    <div class="textbox" id="buildingNumberDel">
                        <h5>@Html.LabelFor(m => m.Addresses[deliveryAddressIndex].BuildingNumber, new {@value="Buildin Number"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[deliveryAddressIndex].BuildingNumber, new { @class = "textBox textbox2", @required = "required", @id = "buildingNumberD", @onchange="CheckNumber('buildingNumberDel')"})
                        </h6>
                        <span></span>
                    </div>
                    <div class="textbox" id="flatNumberDel">
                        <h5>@Html.LabelFor(m => m.Addresses[deliveryAddressIndex].FlatNumber, new {@value="Flat Number"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[deliveryAddressIndex].FlatNumber, new { @class = "textBox textbox2", @id = "flatNumberD", @required = "required", @onchange="CheckNumber('flatNumberDel')"})
                        </h6>
                        <span></span>
                    </div>
                </div>

                <div class="columnTwo" id="columnTwoDelivery">
                    <div class="textbox">
                        <h5>@Html.LabelFor(m => m.Addresses[deliveryAddressIndex].ZipCode, new {@value="Post Code"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[deliveryAddressIndex].ZipCode, new { @id="zipCodeD",@class = "textBox textbox2",@required = "required", @readonly= "readonly", @value=Model.Addresses[deliveryAddressIndex].ZipCode})
                        </h6>
                        <span><i class="fa-solid fa-circle-check" style="color:green"></i></span>
                    </div>
                    <div class="textbox">
                        <h5>@Html.LabelFor(m => m.Addresses[deliveryAddressIndex].City, new {@value="City"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[deliveryAddressIndex].City, new {@id= "cityD", @class = "textBox textbox2", @readonly= "readonly", @Value="Leicester"})
                        </h6>
                        <span><i class="fa-solid fa-circle-check" style="color:green"></i></span>
                    </div>
                    <div class="textbox">
                        <h5>@Html.LabelFor(m => m.Addresses[deliveryAddressIndex].Country, new {@value="Country"})</h5>
                        <h6>
                            @Html.TextBoxFor(m => m.Addresses[deliveryAddressIndex].Country, new {@id="countryD", @class = "textBox textbox2", @readonly= "readonly", @Value="United Kingdoms"})
                        </h6>
                        <span><i class="fa-solid fa-circle-check" style="color:green"></i></span>
                    </div>
                </div>
            </div>
        </div>
    }

    <div id="submit">
        <button type="submit" class="btn btn-success" value="Submit" name="Btn" role="button" id="submitButton">Submit</button>
        <button type="submit" class="btn btn-danger" name="Btn" value="Cancel">Cancel</button>
    </div>

}

<script type="text/javascript">
    function FillShippingAddress() {
        var checkBox = document.getElementById("check-address");
        var streetBil = document.getElementById("streetB");
        var streetDel = document.getElementById("streetD");
        var buildingNoBil = document.getElementById("buildingNumberB");
        var buildingNoDel = document.getElementById("buildingNumberD");
        var flatNumberBil = document.getElementById("flatNumberB");
        var flatNumberDel = document.getElementById("flatNumberD");
        var zipCodeBil = document.getElementById("zipCodeB");
        var zipCodeDel = document.getElementById("zipCodeD");
        var cityBil = document.getElementById("cityB");
        var cityDel = document.getElementById("cityD");
        var countryDel = document.getElementById("countryD");
        var countryBil = document.getElementById("countryB");
        var submit = document.getElementById("submit");

        if (checkBox.checked == true) {
            streetDel.value = streetBil.value;
            buildingNoDel.value = buildingNoBil.value;
            flatNumberDel.value = flatNumberBil.value;
            zipCodeBil.value = zipCodeDel.value;
            cityBil.value = cityDel.value;
            countryBil.value = countryDel.value;
            PutTicksIntoSpanUnderFilledTextboxes();

        } else {
            streetDel.value = "";
            buildingNoDel.value = "";
            flatNumberDel.value = "";
            zipCodeBil.value = "";
            cityBil.value = "";
            countryBil.value = "";
            RemoveTicksFromSpansUnderTextboxes();
        }
    };


    var billingTypeId = document.getElementById("billingTypeId");
    if (billingTypeId != null) {
        billingTypeId.value = "1";

    }
    var deliveryTypeId = document.getElementById("deliveryTypeId");
    deliveryTypeId.value = "2";
    var emailTypeId = document.getElementById("emailTypeId");
    emailTypeId.value = "1";
    var mobileTypeId = document.getElementById("mobileTypeId");
    mobileTypeId.value = "2";

    

    function phoneNumber() {
        var mobileNumberRegex = /^(?:(?:00)?44|0)7(?:[45789]\d{2}|624)\d{6}$/;
        var phoneNumberBox = document.getElementById("phoneBox");
        var textboxMessage = document.getElementById("phoneAlert");
         var submit = document.getElementById("submitButton");

        if (phoneNumberBox.value.replace(/\D/g, '').match(mobileNumberRegex)){
            textboxMessage.style.color = "green";
            textboxMessage.innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i>';
            submit.disabled = false;
        }
        else{
            textboxMessage.style.color = "red";
            textboxMessage.innerHTML = '<i class="fa-solid fa-circle-exclamation"></i> Enter correct phone number';
            submit.disabled = true;
        }
    }

    var email = document.getElementById("emailBox");
    email.addEventListener("change", ValidateEmail);
    var email = document.getElementById("phoneBox");
    email.addEventListener("change", phoneNumber);

    function ValidateEmail() {
        var inputText = document.getElementById("emailBox");
        var textboxMessage = document.getElementById("emailAlert");
        var submit = document.getElementById("submitButton");
        
        var mailformat = /^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        if (inputText.value.match(mailformat)) {
            textboxMessage.style.color = "green";
            textboxMessage.innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i>';
            submit.disabled = false;

        } else {
            textboxMessage.style.color = "red";
            textboxMessage.innerHTML = '<i class="fa-solid fa-circle-exclamation"></i> Enter correct e-mail address';
            submit.disabled = true;
           
        }

    }

    function CheckField(traget) {
        const div = document.getElementById(traget);
        var input = div.getElementsByTagName('input');
        var span = div.getElementsByTagName('span');
        var submit = document.getElementById("submitButton");

        if (input[0].value.length > 2 && input[0].value.length < 50) {
            span[0].style.color = "green";
            span[0].innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i>';
            submit.disabled = false;
        }
        else{
            span[0].style.color = "red";
            span[0].innerHTML = '<i class="fa-solid fa-circle-exclamation"></i> It needs to between 2 and 50 characters';
            submit.disabled = true;
        }
    }

    function CheckNumber(traget) {
        const div = document.getElementById(traget);
        var input = div.getElementsByTagName('input');
        var span = div.getElementsByTagName('span');
        var submit = document.getElementById("submitButton");

        if (input[0].value.length >= 1 && input[0].value.length < 50) {
            span[0].style.color = "green";
            span[0].innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i>';
            submit.disabled = false;
        }
        else {
            span[0].style.color = "red";
            span[0].innerHTML = '<i class="fa-solid fa-circle-exclamation"></i> It needs to between 1 and 50 characters';
            submit.disabled = true;
        }
    }

    function PutTicksIntoSpanUnderFilledTextboxes(){
        const billingSpans = document.querySelectorAll("div#billingAddress div.columnTwo span");
        const deliverySpans = document.querySelectorAll("div#deliveryAddress div.columnOne span");
        for (let i = 0; i < billingSpans.length; i++) {
            billingSpans[i].innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i>';
            deliverySpans[i].innerHTML = '<i class="fa-solid fa-circle-check" style="color:green"></i>';
        }

    }

    function RemoveTicksFromSpansUnderTextboxes(){
        const billingSpans = document.querySelectorAll("div#billingAddress div.columnTwo span");
        const deliverySpans = document.querySelectorAll("div#deliveryAddress div.columnOne span");
        for (let i = 0; i < billingSpans.length; i++) {
            billingSpans[i].innerHTML = "";
            deliverySpans[i].innerHTML = "";
        }
    }

</script>
